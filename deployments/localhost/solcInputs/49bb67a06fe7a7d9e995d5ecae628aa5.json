{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n//Import the library\nimport \"./PriceConverter.sol\";\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    uint256 public minimumUsd = 20 * 1e18; // We need to calculate this before funding otherwise it will error    //50/3000 = 0.016666666666 So 0.02eth should be enough to fund the contract.\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    //To make sure only the admin/owner withdraws. For that we want to make it such that whomever deploys the contract, owns the contract.\n    //We can do this using a constructor, which initializes when deployed.\n    address public owner; //A declared variable\n\n    AggregatorV3Interface public priceFeed; //Assign an address to this type.\n\n    constructor(address priceFeedAddr) {\n        owner = msg.sender; //Calling this inside the constructor ensures, whomever deploys it is name owner and should be able to call the withdraw function.\n        priceFeed = AggregatorV3Interface(priceFeedAddr);\n\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\n            \"Amount is not enough\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        //Now the function includes a modifier\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed.\");\n    }\n\n    //Creating a modifier\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not the owner!\");\n        _; // This is required to make a modifier. This means if the above is true, continue with the rest of the code.\n        //If the _; came first, it would execute the function and then check the require.\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // );\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        return uint256(answer * 1e10); // This will be the value of ETH to USD and exponentially raise to 10 to remove any decimal places.\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n\n/*\n    Adding the chainlink/contracts to manage the data feed - yarn add --dev @chainlink/contracts\n    In the latest version of chainlink/contracts - Aggregator has been moved to shared.\n\n    Because we are initializing the Aggregator address, we don't need to hard code it.\n*/"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}